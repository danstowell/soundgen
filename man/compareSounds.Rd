% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match.R
\name{compareSounds}
\alias{compareSounds}
\title{Compare sounds (experimental)}
\usage{
compareSounds(target, targetSpec = NULL, cand, samplingRate = NULL,
  simMeasure = c("cor", "cosine", "pixel", "dtw")[1], windowLength = 40,
  overlap = 50, step = NULL, padWith = NA, penalizeLengthDif = TRUE,
  throwaway = -120, summary = TRUE)
}
\arguments{
\item{targetSpec}{if already calculated, the target auditory spectrum can be
provided}

\item{summary}{if TRUE, returns the mean of similarity values calculated by
all methods in \code{simMeasure}}
}
\description{
Computes similarity between two sounds based on correlating mel-transformed
spectra (auditory spectra).
}
\examples{
target = soundgen(sylLen = 500,
                  pitchAnchors = data.frame(time = c(0, 0.1, 0.9, 1),
                                            value = c(100, 150, 135, 100)),
                  temperature = 0)
targetSpec = soundToAudiogram(target, samplingRate = 16000)
parsToTry = list(
  list(sylLen = 300,
       pitchAnchors = data.frame(time = c(0, 0.3, 0.7, 1),
                                 value = c(100, 110, 105, 100))),
  list(sylLen = 300,
       pitchAnchors = data.frame(time = c(0, 0.1, 0.9, 1),
                                 value = c(100, 150, 135, 100))),
  list(sylLen = 500,
       pitchAnchors = data.frame(time = c(0, 0.3, 0.7, 1),
                                 value = c(100, 110, 105, 100))),
  list(sylLen = 500,
       pitchAnchors = data.frame(time = c(0, 0.1, 0.9, 1),
                                 value = c(100, 150, 135, 100)))
)

sounds = list()
for (s in 1:length(parsToTry)) {
  sounds[[length(sounds) + 1]] = do.call(soundgen, c(parsToTry[[s]],
                                                   list(temperature = 0)))
}

fitness = c('cor', 'cosine', 'pixel', 'dtw')
df = matrix(NA, nrow = length(parsToTry), ncol = length(fitness))
colnames(df) = fitness
df = as.data.frame(df)
for (i in 1:nrow(df)) {
  df[i, ] = compareSounds(target = NULL,
                          targetSpec = targetSpec,
                          cand = sounds[[i]],
                          samplingRate = 16000,
                          padWith = NA,
                          penalizeLengthDif = TRUE,
                          fitness = fitness,
                          summary = FALSE)
}
df$av = rowMeans(df, na.rm = TRUE)
df
}
