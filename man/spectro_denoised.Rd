% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spectrogram.R
\name{spectro_denoised}
\alias{spectro_denoised}
\title{Spectrogram}
\usage{
spectro_denoised(soundfile, frameBank = NULL, samplingRate = NULL,
  windowLength = 50, step = 15, wn = "gaussian", zp = 0,
  median_smoothing_freq = 0, median_smoothing_time = 0,
  denoise_median_time = 0, percentNoise = 0, noiseReduction = 0,
  contrast = 0.2, brightness = 0, method = c("spectrum",
  "spectralDerivative")[1], output = c("none", "original", "processed")[1],
  ylim = NULL, plot = TRUE, osc = F, colorTheme = c("bw", "seewave",
  "...")[1], xlab = "", ...)
}
\arguments{
\item{soundfile}{path to a .wav file or a vector of amplitudes with specified
samplingRate}

\item{frameBank}{(alternative to \code{soundfile}) a previously saved bank of
individual frames as produced by function \code{\link{getFrameBank}}}

\item{samplingRate}{sampling rate of \code{soundfile} (only needed if
\code{soundfile} is a numeric vector, rather than a .wav file)}

\item{windowLength}{length of fft window, ms}

\item{step}{fft step, ms}

\item{wn}{window type}

\item{zp}{zero padding, points}

\item{median_smoothing_freq, median_smoothing_time}{length of the window, in
data points (0 to +inf), for calculating a rolling median. Applies median
smoothing to spectrogram in frequency and time domains, respectively}

\item{denoise_median_time}{the quantile to be subtracted for each frequency
bin. For ex., if denoise_median_time = 0.5, the median of each frequency
bin (over the entire sound duration) will be calculated and subtracted from
each frame (see examples)}

\item{percentNoise}{proportion of frames (0 to 1) used for calculating noise
spectrum}

\item{noiseReduction}{how much noise to remove (0 to +inf, recommended 0 to
2). 0 = no noise reduction, 2 = strong noise reduction: \eqn{spectrum -
(noiseReduction * noiseSpectrum)}, where noiseSpectrum is the average
spectrum of frames with entropy exceeding the quantile set by
\code{percentNoise}}

\item{contrast}{spectrum is exponentiated by contrast (-inf to +inf,
recommended -1 to +1). Contrast >0 increases sharpness, <0 decreases
harpness}

\item{brightness}{how much to "lighten" the image (>0 = lighter, <0 = darker)}

\item{method}{plot spectrum ('spectrum') or the first time derivative of the
spectrum ('spectralDerivative')}

\item{output}{specifies what to return: nothing ('none'), unmodified
spectrogram ('original'), or denoised and/or smoothed spectrogram
('processed')}

\item{ylim}{frequency range to plot, kHz (defaults to 0 to Nyquist frequency)}

\item{plot}{should a spectrogram be plotted? TRUE / FALSE}

\item{osc}{should an oscillogram be shown under the spectrogram? TRUE / FALSE}

\item{colorTheme}{black and white ('bw'), as in seewave package ('seewave'),
or another color theme (e.g. 'heat.colors')}

\item{xlab}{label for x-axis}

\item{...}{other graphical parameters}
}
\value{
Returns nothing (if output = 'none'), raw spectrum (if output =
  'original'), denoised and/or smoothed spectrum (if output = 'processed'),
  or spectral derivatives (if method = 'spectralDerivative') as a matrix of
  real numbers.
}
\description{
Produces a spectrogram of a sound using short-term Fourier transform. This is
a simplified version of \code{\link[seewave]{spectro}} with fewer
plotting options, but with added routines for noise reduction, smoothing in
time and frequency domains, and controlling contrast and brightness.
}
\examples{
# synthesize a sound 1 s long, with a gradually increasing breathing noise
sound = generateBout(sylDur_mean=1000, samplingRate=16000,
  breathingAnchors=data.frame(time=c(0,1200), ampl=c(-120,-10)))
# playme(sound, samplingRate=16000)

# basic spectrogram
spectro_denoised(sound, samplingRate=16000)
# add an oscillogram
spectro_denoised(sound, samplingRate=16000, osc=TRUE)
# broad-band instead of narrow-band
spectro_denoised(sound, samplingRate=16000, windowLength=5)
# spectral derivatives
spectro_denoised(sound, samplingRate=16000, method='spectralDerivative')

# focus only on values in the upper 5\% for each frequency bin
spectro_denoised(sound, samplingRate=16000, denoise_median_time=0.95)
# detect 10\% of the noisiest frames based on entropy and remove the pattern
# found in those frames (in this cases, breathing)
spectro_denoised(sound, samplingRate=16000, percentNoise=0.1, noiseReduction=4)
# apply median smoothing in both time and frequency domains
spectro_denoised(sound, samplingRate=16000, median_smoothing_freq=5, median_smoothing_time=5)
# increase contrast, reduce brightness
spectro_denoised(sound, samplingRate=16000, contrast=1, brightness=-1)

# add bells and whistles
spectro_denoised(sound, samplingRate=16000, osc=TRUE, contrast=1, brightness=-1,
  colorTheme='heat.colors', xlab = 'Time, ms', ylab = 'Frequency, kHz', ylim=c(0,5))
}
