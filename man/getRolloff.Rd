% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/source_spectrum.R
\name{getRolloff}
\alias{getRolloff}
\title{Control rolloff of harmonics}
\usage{
getRolloff(pitch_per_gc = c(440), nHarmonics = 100, rolloff_exp = -12,
  rolloff_exp_delta = -2, quadratic_delta = 0, quadratic_nHarm = 2,
  quadratic_ceiling = NULL, adjust_rolloff_per_kHz = -6,
  baseline_Hz = 200, throwaway_dB = -120, samplingRate = 44100,
  plot = FALSE)
}
\arguments{
\item{pitch_per_gc}{a vector of f0 per glottal cycle, Hz}

\item{nHarmonics}{maximum number of harmonics to generate (very weak
harmonics with amplitude < \code{throwaway_dB} will be discarded)}

\item{rolloff_exp}{basic rolloff at a constant rate of \code{rolloff_exp}
db/octave (exponential decay)}

\item{rolloff_exp_delta}{basic rolloff changes from lower to upper harmonics
(regardless of f0) by \code{rolloff_exp_delta} dB/oct. For example, we can
get steeper rolloff in the upper part of the spectrum}

\item{quadratic_delta}{an optional quadratic term affecting only the first
\code{quadratic_nHarm} harmonics. The middle harmonic of the first
\code{quadratic_nHarm} harmonics is amplified or dampened by
\code{quadratic_delta} dB relative to the basic exponential decay.}

\item{quadratic_nHarm}{the number of harmonics affected by
\code{quadratic_delta}}

\item{quadratic_ceiling}{an alternative way of specifying which harmonics are
affected by \code{quadratic_delta}: instead of \code{quadratic_nHarm}, we
can specify \code{quadratic_ceiling} to apply a parabolic boost to all
harmonics up to this frequency (ie \code{quadratic_nHarm} will vary
depending on f0). Defaults to NULL}

\item{adjust_rolloff_per_kHz}{rolloff changes linearly with f0 by
\code{adjust_rolloff_per_kHz} dB/kHz. For ex., -6 dB/kHz gives a 6 dB
steeper basic rolloff as f0 goes up by 1000 Hz}

\item{baseline_Hz}{The "neutral" frequency, at which no adjustment of rolloff
takes place regardless of \code{adjust_rolloff_per_kHz}}

\item{throwaway_dB}{discard harmonics that are weaker than this number (in
dB) to save computational resources}

\item{samplingRate}{sampling rate (needed to stop at Nyquist frequency and
for plotting purposes)}

\item{plot}{if TRUE, produces a plot}
}
\value{
Returns a matrix of amplitude multiplication factors for adjusting
  the amplitude of harmonics relative fo f0. Each row of output contains one
  harmonic, and each column contains one glottal cycle.
}
\description{
Harmonics are generated as separate sine waves. But we don't want each
harmonic to be equally strong, so we normally specify some rolloff function
that describes the loss of energy in upper harmonics relative to the
fundamental frequency (f0). \code{\link{getRolloff}} provides flexible
control over this rolloff function, going beyond simple exponential decay
(\code{rolloff_exp}). Use quadratic terms to modify the behavior of a few lower
harmonics, \code{rolloff_exp_delta} to adjust the rate of decay per octave, and
\code{adjust_rolloff_per_kHz} for rolloff correction depending on f0. Plot the
output with different parameter values and see examples below and the
vignette to get a feel for how to use \code{\link{getRolloff}} effectively.
}
\examples{
# steady exponential rolloff of -12 dB per octave
rolloff = getRolloff(pitch_per_gc = 150, rolloff_exp = -12,
  rolloff_exp_delta = 0, plot = TRUE)
# the rate of rolloff slows down with each octave
rolloff = getRolloff(pitch_per_gc = 150, rolloff_exp = -12,
  rolloff_exp_delta = 2, plot = TRUE)
# the rate of rolloff increases with each octave
rolloff = getRolloff(pitch_per_gc = 150, rolloff_exp = -12,
  rolloff_exp_delta = -2, plot = TRUE)

# variable f0: the lower f0, the more harmonics are non-zero
rolloff = getRolloff(pitch_per_gc = c(150, 800, 3000),
  rolloff_exp_delta = 0, plot = TRUE)
# without the correction for f0 (adjust_rolloff_per_kHz),
  # high-pitched sounds have the same rolloff as low-pitched sounds,
  # producing unnaturally strong high-frequency harmonics
rolloff = getRolloff(pitch_per_gc = c(150, 800, 3000),
  rolloff_exp_delta = 0, adjust_rolloff_per_kHz = 0, plot = TRUE)

# parabolic adjustment of lower harmonics
rolloff = getRolloff(pitch_per_gc = 350, quadratic_delta = 0,
  quadratic_nHarm = 2, samplingRate = 16000, plot = TRUE)
# quadratic_nHarm = 1 affects only f0
rolloff = getRolloff(pitch_per_gc = 150, quadratic_delta = 30,
  quadratic_nHarm = 1, samplingRate = 16000, plot = TRUE)
# quadratic_nHarm=2 or 3 affects only h1
rolloff = getRolloff(pitch_per_gc = 150, quadratic_delta = 30,
  quadratic_nHarm = 2, samplingRate = 16000, plot = TRUE)
# quadratic_nHarm = 4 affects h1 and h2, etc
rolloff = getRolloff(pitch_per_gc = 150, quadratic_delta = 30,
  quadratic_nHarm = 4, samplingRate = 16000, plot = TRUE)
# negative quadratic_delta weakens lower harmonics
rolloff = getRolloff(pitch_per_gc = 150, quadratic_delta = -20,
  quadratic_nHarm = 7, samplingRate = 16000, plot = TRUE)
# only harmonics below 2000 Hz are affected
rolloff = getRolloff(pitch_per_gc = c(150, 600),
  quadratic_delta = -20, quadratic_ceiling = 2000, samplingRate = 16000,
  plot = TRUE)
}
