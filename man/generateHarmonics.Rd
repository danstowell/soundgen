% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/source.R
\name{generateHarmonics}
\alias{generateHarmonics}
\title{Generate harmonics}
\usage{
generateHarmonics(pitch, attackLen = 50, noiseAmount = 0,
  noiseIntensity = 0, jitterDep = 0, jitterLength_ms = 1,
  vibratoFreq = 100, vibratoDep = 0, shimmerDep = 0, creakyBreathy = 0,
  rolloff_exp = -18, rolloff_exp_delta = -2, adjust_rolloff_per_kHz = -6,
  quadratic_delta = 0, quadratic_nHarm = 3, formantStrength = 1,
  temperature = 0, min_epoch_length_ms = 300, g0 = 100,
  sideband_width_hz = 0, rolloff_lip = 6, trill_dep = 0,
  trill_freq = 30, amplAnchors = NA, overlap = 75,
  windowLength_points = 2048, samplingRate = 44100, pitch_floor = 75,
  pitch_ceiling = 3500, pitchSamplingRate = 3500)
}
\arguments{
\item{pitch}{a contour of fundamental frequency (numeric vector). NB: for
computational efficiency, provide the pitch contour at a reduced sampling
rate pitchSamplingRate, eg 3500 points/s. The pitch contour will be
upsampled before synthesis.}

\item{attackLen}{duration of fade-in/ fade-out at each end of syllable and breathing noise (ms)}

\item{noiseAmount}{hyperparameter for regulating the (approximate) proportion of sound with different noise regimes (none / subharmonics only / subharmonics and jitter), 0 to 100\%. 0\% = no noise; 100\% = the entire sound has jitter + subharmonics. Ignored if temperature=0}

\item{noiseIntensity}{hyperparameter for regulating the intensity of subharmonics and jitter, 0 to 100\% (50\% = jitter and subharmonics are as specified, <50\% weaker, >50\% stronger). Ignored if temperature=0}

\item{jitterDep}{cycle-to-cycle random pitch variation (semitones)}

\item{jitterLength_ms}{duration of pitch jump (ms). Use a low value for harsh noise, a high value for irregular vibrato or shaky voice}

\item{vibratoFreq}{the rate of regular pitch modulation, or vibrato (Hz)}

\item{vibratoDep}{the depth of vibrato, semitones}

\item{shimmerDep}{random variation in amplitude between individual glottal cycles (0 to 100\% of original amplitude of each cycle)}

\item{creakyBreathy}{hyperparameter for a rough adjustment of voice quality from creaky (-1) to breathy (+1)}

\item{rolloff_exp}{basic rolloff at a constant rate of \code{rolloff_exp}
db/octave (exponential decay). See \code{\link{getRolloff}} for more details}

\item{rolloff_exp_delta}{basic rolloff changes from lower to upper harmonics
(regardless of f0) by \code{rolloff_exp_delta} dB/oct. For example, we can
get steeper rolloff in the upper part of the spectrum}

\item{adjust_rolloff_per_kHz}{rolloff changes linearly with f0 by
\code{adjust_rolloff_per_kHz} dB/kHz. For ex., -6 dB/kHz gives a 6 dB
steeper basic rolloff as f0 goes up by 1000 Hz}

\item{quadratic_delta}{an optional quadratic term affecting only the first
\code{quadratic_nHarm} harmonics. The middle harmonic of the first
\code{quadratic_nHarm} harmonics is amplified or dampened by
\code{quadratic_delta} dB relative to the basic exponential decay.}

\item{quadratic_nHarm}{the number of harmonics affected by
\code{quadratic_delta}}

\item{formantStrength}{scale factor of formant amplitude}

\item{temperature}{hyperparameter for regulating the amount of stochasticity in sound generation (see Details)}

\item{min_epoch_length_ms}{minimum duration of each epoch with unchanging
subharmonics regime, in ms}

\item{g0}{target frequency of subharmonics (lower than f0, adjusted dynamically so f0 is always a multiple of g0)}

\item{sideband_width_hz}{regulates how quickly the strength of subharmonics
fades as they move away from harmonics in f0 stack. Low values produce
narrow sidebands, high values produce uniformly strong subharmonics}

\item{rolloff_lip}{the effect of lip radiation on source spectrum, dB/oct (the default of +6 dB/oct produces a high-frequency boost when the mouth is open)}

\item{trill_dep}{amplitude modulation depth (0 to 1). 0: no change;1: amplitude modulation with amplitude range equal to the dynamic range of the sound}

\item{trill_freq}{amplitude modulation frequency, Hz}

\item{amplAnchors}{dataframe specifying the time (ms) and amplitude (0 to 1) of amplitude anchors}

\item{overlap}{Fourier window overlap (points)}

\item{windowLength_points}{Fourier window length (points)}

\item{samplingRate}{sampling frequency (Hz)}

\item{pitch_floor}{lower/upper bounds of fundamental frequency}

\item{pitch_ceiling}{lower/upper bounds of fundamental frequency}

\item{pitchSamplingRate}{sampling frequency of the pitch contour only. Low values can decrease processing time (Hz). A rule of thumb is to set this to the same value as \code{pitch_ceiling}}
}
\description{
Internal soundgen function.
}
\details{
Returns one continuous, unfiltered, voiced syllable consisting of several
sine waves.
}
\examples{
pitch=soundgen:::getSmoothContour(len=3500,
  anchors=data.frame('time'=c(0,1), 'ampl'=c(200,300)))
plot(pitch)
sound = soundgen:::generateHarmonics(pitch, samplingRate=16000)
# playme(sound, samplingRate=16000) # no formants yet
}
