% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match.R
\name{reproduceSound}
\alias{reproduceSound}
\title{Reproduce sound (experimental)}
\usage{
reproduceSound(target, samplingRate = NULL, pars, init = NULL,
  simMeasure = c("cor", "cosine", "pixel", "dtw"), probMutation = 0.25,
  stepVariance = 0.1, maxIter = 50, minExpectedDelta = 0.001,
  windowLength = 40, overlap = 50, step = NULL, verbose = TRUE,
  padWith = NA, penalizeLengthDif = TRUE, throwaway = -120)
}
\arguments{
\item{target}{the sound we want to reproduce using soundgen: path to a .wav
file or numeric vector}

\item{samplingRate}{sampling rate of \code{x} (only needed if
\code{x} is a numeric vector, rather than a .wav file)}

\item{pars}{arguments to \code{\link{soundgen}} that we are attempting to
optimize}

\item{init}{values of other arguments to soundgen that are fixed at
non-default values}

\item{simMeasure}{method of comparing mel-transformed spectra of two sounds:
"cor" = average Pearson's correlation of mel-transformed spectra of
individual FFT frames; "cosine" = same as "cor" but with cosine similarity
instead of Pearson's correlation; "pixel" = absolute difference between
each point in the two spectra; "dtw" = discrete time warp with
\code{\link[dtw]{dtw}}}

\item{probMutation}{the probability of a parameter mutating per iteration}

\item{stepVariance}{scale factor for calculating the size of mutations}

\item{maxIter}{maximum number of mutated sounds produced without improving
the fit to target}

\item{minExpectedDelta}{minimum improvement in fit to target required to
accept the new sound candidate}

\item{windowLength}{length of FFT window, ms}

\item{overlap}{overlap between successive FFT frames, \%}

\item{step}{you can override \code{overlap} by specifying FFT step, ms}

\item{verbose}{if TRUE, plays back the accepted candidate at each iteration
and reports the outcome}

\item{padWith}{compared spectra are padded to have the same number of
columns. Padding with zeroes ... ? and with NA ...?}

\item{penalizeLengthDif}{if TRUE, sounds of different length are considered
to be less similar; if FALSE, only the overlapping parts of two sounds are
compared}

\item{throwaway}{parts of the spectrum quieter than \code{throwaway} dB are
not compared}
}
\value{
Returns a list of length 2: \code{$history} contains the tried
  parameter values together their fit to target \code{$sim}, and \code{$pars}
  contains a list of the final - hopefully best - parameter settings.
}
\description{
Attempts to find \code{\link{soundgen}} settings that would reproduce an
existing sound by mutating control parameters and measuring fit to target.
The optimization algorithm is simple hill climbing. Disclaimer: this function
is experimental and may or may not work for particular tasks. It is intended
as a supplement to - not replacement of - manual optimization (see the
vignette on sound production for examples).
}
\examples{

}
